package galip.hro.inspectorsgadget;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.media.AudioManager;
import android.os.Bundle;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SoundEffectConstants;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;

import java.util.LinkedList;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class ContainersActivity extends Activity {

    /** {@link CardScrollView} to use as the main content view. */
    private CardScrollView mCardScroller;
    private ListView listView;
    public static LinkedList<String> listContainersMissing;
    public LinkedList<String> listContainersHarbour;
    public LinkedList<String> listContainersShip;
    ListView view;
    private float x1 = 1;

//    public ContainersActivity(LinkedList listContainersMissing)
//    {
//        this.listContainersMissing = listContainersMissing;
//    }


    /** "Hello World!" {@link View} generated by {@link #buildView()}. */
    private View mView;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        getContainerLists();

        CompareLists compareList = new CompareLists(listContainersHarbour, listContainersShip);
        LinkedList<String> listContainersMissing = new LinkedList<String>();
        listContainersMissing = compareList.compare();
        String[] missingContainers;

        mView = buildView();
        view = new ListView(this);
        if (listContainersMissing.size() == 0 )
        {
            missingContainers = new String[1];
            missingContainers[0] = "there are no missing containers";
        }
        else {

           missingContainers = new String[listContainersMissing.size()];

            for (int n = 0; n < missingContainers.length; n++) {
                missingContainers[n] = listContainersMissing.getFirst();
                listContainersMissing.removeFirst();
            }
        }
        ArrayAdapter<String> containersAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, missingContainers);
        view.setAdapter(containersAdapter);


        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });
        // Handle the TAP event.
        view.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.DISALLOWED);
            }
        });
        setContentView(view);
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }



    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);
        String text3 = "Hello world";


        card.setText(text3);
        return card.getView();
    }

    public void getContainerLists()
    {
        listContainersHarbour = new LinkedList<String>();
        listContainersShip = new LinkedList<String>();


        listContainersHarbour.add("SZLU9649164");
        listContainersHarbour.add("CXRU1142279");
        listContainersHarbour.add("SZLU9643124");
        listContainersHarbour.add("TRUI8599496");
        listContainersHarbour.add("MORU0717200");
        listContainersHarbour.add("OOLU6403232");
        listContainersHarbour.add("OOLU6162330");

        listContainersShip.add("SZLU9649164");
        listContainersShip.add("CXRU1142279");
        listContainersShip.add("SZLU9643124");
        listContainersShip.add("TRUI8599496");
        listContainersShip.add("MORU0717200");
        listContainersShip.add("OOLU6403232");
        listContainersShip.add("OOLU6162330");

        //This ones are the missing containers
//        listContainersShip.add("TTNU8003196");
//        listContainersShip.add("CRLU1624907");
//        listContainersShip.add("HLXU8789181");
//        listContainersShip.add("GESU9459802");
    }

    @Override
    public boolean onGenericMotionEvent(MotionEvent event) {
        int action = event.getActionMasked();

        switch (action) {
            case MotionEvent.ACTION_DOWN:
                // set initial point of reference
                x1 = event.getX();
                break;
            case MotionEvent.ACTION_UP:
                break;
            case MotionEvent.ACTION_MOVE:
                if (event.getX() > x1) {
                    // calculate delta
                    float temp = event.getX() - x1;
                    // make sure delta is greater than 200
                    if (event.getX() - x1 > 200) {
                        if (view.getSelectedItemPosition() < view.getCount() - 1) {
                            view.playSoundEffect(SoundEffectConstants.CLICK);
                            view.setSelection(view.getSelectedItemPosition() + 1);
                        }
                        // set new reference point
                        x1 = event.getX();
                    }
                } else if (event.getX() < x1) {
                    // make sure delta is greather than 200
                    if (x1 - event.getX() > 200) {
                        float temp = x1 - event.getX();
                        if (view.getSelectedItemPosition() > 0) {
                            view.playSoundEffect(SoundEffectConstants.CLICK);
                            view.setSelection(view.getSelectedItemPosition() - 1);
                        }
                        // set new reference point
                        x1 = event.getX();
                    }
                }
                break;
            case MotionEvent.ACTION_POINTER_DOWN:
                // set reference point
                x1 = event.getX();
                break;

            case MotionEvent.ACTION_POINTER_UP:
                break;
            default:
                break;

        }
        return false;
    }

}
